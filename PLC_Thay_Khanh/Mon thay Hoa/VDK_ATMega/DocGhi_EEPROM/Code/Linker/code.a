;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/4/2023
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;
;
;void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
; 0000 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F        /* Wait for completion of previous write */
; 0000 0020        while(EECR & (1<<EEWE));
;	uiAddress -> Y+1
;	ucData -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0021 
; 0000 0022        /* Set up address and data registers */
; 0000 0023        EEAR = uiAddress;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0024        EEDR = ucData;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0025 
; 0000 0026        /* Write logical one to EEMWE */
; 0000 0027        EECR |= (1<<EEMWE);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0028 
; 0000 0029        /* Start eeprom write by setting EEWE */
; 0000 002A        EECR |= (1<<EEWE);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002B }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;void main(void)
; 0000 002E {
;PCODE: $00000020 VOL: 0
; 0000 002F // Declare your local variables here
; 0000 0030 
; 0000 0031 // Input/Output Ports initialization
; 0000 0032 // Port A initialization
; 0000 0033 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0034 // State7=1 State6=1 State5=1 State4=1 State3=1 State2=1 State1=1 State0=1
; 0000 0035 PORTA=0xFF;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0036 DDRA=0xFF;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0037 
; 0000 0038 // Port B initialization
; 0000 0039 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 003A // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003B PORTB=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003C DDRB=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003D 
; 0000 003E // Port C initialization
; 0000 003F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0040 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0041 PORTC=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0042 DDRC=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0043 
; 0000 0044 // Port D initialization
; 0000 0045 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0046 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0047 PORTD=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0048 DDRD=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0049 
; 0000 004A // Timer/Counter 0 initialization
; 0000 004B // Clock source: System Clock
; 0000 004C // Clock value: Timer 0 Stopped
; 0000 004D // Mode: Normal top=0xFF
; 0000 004E // OC0 output: Disconnected
; 0000 004F TCCR0=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0050 TCNT0=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0051 OCR0=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0052 
; 0000 0053 // Timer/Counter 1 initialization
; 0000 0054 // Clock source: System Clock
; 0000 0055 // Clock value: Timer1 Stopped
; 0000 0056 // Mode: Normal top=0xFFFF
; 0000 0057 // OC1A output: Discon.
; 0000 0058 // OC1B output: Discon.
; 0000 0059 // Noise Canceler: Off
; 0000 005A // Input Capture on Falling Edge
; 0000 005B // Timer1 Overflow Interrupt: Off
; 0000 005C // Input Capture Interrupt: Off
; 0000 005D // Compare A Match Interrupt: Off
; 0000 005E // Compare B Match Interrupt: Off
; 0000 005F TCCR1A=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0060 TCCR1B=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0061 TCNT1H=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0062 TCNT1L=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0063 ICR1H=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0064 ICR1L=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0065 OCR1AH=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0066 OCR1AL=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0067 OCR1BH=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0068 OCR1BL=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0069 
; 0000 006A // Timer/Counter 2 initialization
; 0000 006B // Clock source: System Clock
; 0000 006C // Clock value: Timer2 Stopped
; 0000 006D // Mode: Normal top=0xFF
; 0000 006E // OC2 output: Disconnected
; 0000 006F ASSR=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0070 TCCR2=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0071 TCNT2=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0072 OCR2=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0073 
; 0000 0074 // External Interrupt(s) initialization
; 0000 0075 // INT0: Off
; 0000 0076 // INT1: Off
; 0000 0077 // INT2: Off
; 0000 0078 MCUCR=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0079 MCUCSR=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 007A 
; 0000 007B // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 007C TIMSK=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 007D 
; 0000 007E // USART initialization
; 0000 007F // USART disabled
; 0000 0080 UCSRB=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0081 
; 0000 0082 // Analog Comparator initialization
; 0000 0083 // Analog Comparator: Off
; 0000 0084 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0085 ACSR=0x80;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0086 SFIOR=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0087 
; 0000 0088 // ADC initialization
; 0000 0089 // ADC disabled
; 0000 008A ADCSRA=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 008B 
; 0000 008C // SPI initialization
; 0000 008D // SPI disabled
; 0000 008E SPCR=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 008F 
; 0000 0090 // TWI initialization
; 0000 0091 // TWI disabled
; 0000 0092 TWCR=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0093 
; 0000 0094 EEPROM_write(0x00, 0xA9);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0095 
; 0000 0096 while (1)
;PCODE: $0000006A VOL: 0
; 0000 0097       {
; 0000 0098       // Place your code here
; 0000 0099 
; 0000 009A       }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 009B }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
