
LedDichBit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068f  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cf  00000000  00000000  0000081f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001020  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d1  00000000  00000000  000013b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001486  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA = 0XFF;	// Definition Pin as OUTPUTS
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0X00;	// Các chân ngõ ra là 0v
  70:	1b ba       	out	0x1b, r1	; 27
			//_delay_ms(200);
			//PORTA |= (1<<i);
			//PORTA |= (1<<(i-7));
		//}
		
		PORTA = 0B00000001;
  72:	21 e0       	ldi	r18, 0x01	; 1
  74:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	3f ef       	ldi	r19, 0xFF	; 255
  78:	43 ec       	ldi	r20, 0xC3	; 195
  7a:	59 e0       	ldi	r21, 0x09	; 9
  7c:	31 50       	subi	r19, 0x01	; 1
  7e:	40 40       	sbci	r20, 0x00	; 0
  80:	50 40       	sbci	r21, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <main+0x10>
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x1a>
  86:	00 00       	nop
  88:	87 e0       	ldi	r24, 0x07	; 7
  8a:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(200);
		for(int i = 0; i<7; i++)
		{
			PORTA = PORTA << 1;
  8c:	3b b3       	in	r19, 0x1b	; 27
  8e:	33 0f       	add	r19, r19
  90:	3b bb       	out	0x1b, r19	; 27
  92:	3f ef       	ldi	r19, 0xFF	; 255
  94:	43 ec       	ldi	r20, 0xC3	; 195
  96:	59 e0       	ldi	r21, 0x09	; 9
  98:	31 50       	subi	r19, 0x01	; 1
  9a:	40 40       	sbci	r20, 0x00	; 0
  9c:	50 40       	sbci	r21, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
  a4:	01 97       	sbiw	r24, 0x01	; 1
			//PORTA |= (1<<(i-7));
		//}
		
		PORTA = 0B00000001;
		_delay_ms(200);
		for(int i = 0; i<7; i++)
  a6:	31 f3       	breq	.-52     	; 0x74 <main+0x8>
  a8:	f1 cf       	rjmp	.-30     	; 0x8c <main+0x20>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
