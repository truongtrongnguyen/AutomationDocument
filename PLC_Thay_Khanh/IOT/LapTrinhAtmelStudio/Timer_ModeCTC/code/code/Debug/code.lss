
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005aa  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052e  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001aa  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000315  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001135  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRB = 0x08; // PB3(OC0) as Output
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	87 bb       	out	0x17, r24	; 23
	while(1)
	{
		OCR0 = 99;
  70:	43 e6       	ldi	r20, 0x63	; 99
		TCCR0 = (1<<WGM01)|(1<<CS01)|(1<<CS00)|(1<<COM00)|(1<<COM01);
  72:	3b e3       	ldi	r19, 0x3B	; 59
		while((TIFR&0x02)==0);
		TIFR = 0x02;
  74:	82 e0       	ldi	r24, 0x02	; 2
		
		OCR0 = 69;
  76:	25 e4       	ldi	r18, 0x45	; 69
		TCCR0 = (1<<WGM01)|(1<<CS01)|(1<<CS00)|(1<<COM01);
  78:	9b e2       	ldi	r25, 0x2B	; 43
{
    /* Replace with your application code */
	DDRB = 0x08; // PB3(OC0) as Output
	while(1)
	{
		OCR0 = 99;
  7a:	4c bf       	out	0x3c, r20	; 60
		TCCR0 = (1<<WGM01)|(1<<CS01)|(1<<CS00)|(1<<COM00)|(1<<COM01);
  7c:	33 bf       	out	0x33, r19	; 51
		while((TIFR&0x02)==0);
  7e:	08 b6       	in	r0, 0x38	; 56
  80:	01 fe       	sbrs	r0, 1
  82:	fd cf       	rjmp	.-6      	; 0x7e <main+0x12>
		TIFR = 0x02;
  84:	88 bf       	out	0x38, r24	; 56
		
		OCR0 = 69;
  86:	2c bf       	out	0x3c, r18	; 60
		TCCR0 = (1<<WGM01)|(1<<CS01)|(1<<CS00)|(1<<COM01);
  88:	93 bf       	out	0x33, r25	; 51
		while((TIFR&0x02)==0);
  8a:	08 b6       	in	r0, 0x38	; 56
  8c:	01 fe       	sbrs	r0, 1
  8e:	fd cf       	rjmp	.-6      	; 0x8a <main+0x1e>
		TIFR = 0x02;
  90:	88 bf       	out	0x38, r24	; 56

int main(void)
{
    /* Replace with your application code */
	DDRB = 0x08; // PB3(OC0) as Output
	while(1)
  92:	f3 cf       	rjmp	.-26     	; 0x7a <main+0xe>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
