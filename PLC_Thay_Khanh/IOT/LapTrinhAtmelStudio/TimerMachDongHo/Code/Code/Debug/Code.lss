
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000214  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006a  0080006a  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000761  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067c  00000000  00000000  00000ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000301  00000000  00000000  0000112d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b2  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000277  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 98 00 	call	0x130	; 0x130 <main>
  8a:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z7HienThij>:
unsigned char MaDB[10] = {0XC0, 0XF9, 0XA4, 0XB0, 0X99, 0X92, 0X82, 0XF8, 0X80, 0X90};
volatile unsigned long dem = 0;
unsigned int Count = 0;

void HienThi(unsigned int x)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ac 01       	movw	r20, r24
	uint16_t temp, HangChuc, DonVi;
	temp = x;
	HangChuc = temp/10;
  98:	9c 01       	movw	r18, r24
  9a:	ad ec       	ldi	r26, 0xCD	; 205
  9c:	bc ec       	ldi	r27, 0xCC	; 204
  9e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <__umulhisi3>
  a2:	96 95       	lsr	r25
  a4:	87 95       	ror	r24
  a6:	96 95       	lsr	r25
  a8:	87 95       	ror	r24
  aa:	96 95       	lsr	r25
  ac:	87 95       	ror	r24
	DonVi = temp%10;
  ae:	bc 01       	movw	r22, r24
  b0:	66 0f       	add	r22, r22
  b2:	77 1f       	adc	r23, r23
  b4:	9c 01       	movw	r18, r24
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	26 0f       	add	r18, r22
  c4:	37 1f       	adc	r19, r23
  c6:	42 1b       	sub	r20, r18
  c8:	53 0b       	sbc	r21, r19
	
	for(int i = 0; i<2; i++)
	{
		PORTA = 0X00;
  ca:	1b ba       	out	0x1b, r1	; 27
		PORTA = (1<<PINA0);
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	2b bb       	out	0x1b, r18	; 27
		PORTB = MaDB[HangChuc];
  d0:	dc 01       	movw	r26, r24
  d2:	a0 5a       	subi	r26, 0xA0	; 160
  d4:	bf 4f       	sbci	r27, 0xFF	; 255
  d6:	8c 91       	ld	r24, X
  d8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e8       	ldi	r24, 0x8F	; 143
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <_Z7HienThij+0x4c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <_Z7HienThij+0x52>
  e4:	00 00       	nop
		_delay_ms(0.1);
		
		PORTA = 0X00;
  e6:	1b ba       	out	0x1b, r1	; 27
		PORTA = (1<<PINB1);
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	8b bb       	out	0x1b, r24	; 27
		PORTB = MaDB[DonVi];
  ec:	fa 01       	movw	r30, r20
  ee:	e0 5a       	subi	r30, 0xA0	; 160
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	90 81       	ld	r25, Z
  f4:	98 bb       	out	0x18, r25	; 24
  f6:	cf e8       	ldi	r28, 0x8F	; 143
  f8:	d1 e0       	ldi	r29, 0x01	; 1
  fa:	21 97       	sbiw	r28, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <_Z7HienThij+0x68>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <_Z7HienThij+0x6e>
 100:	00 00       	nop
	HangChuc = temp/10;
	DonVi = temp%10;
	
	for(int i = 0; i<2; i++)
	{
		PORTA = 0X00;
 102:	1b ba       	out	0x1b, r1	; 27
		PORTA = (1<<PINA0);
 104:	2b bb       	out	0x1b, r18	; 27
		PORTB = MaDB[HangChuc];
 106:	9c 91       	ld	r25, X
 108:	98 bb       	out	0x18, r25	; 24
 10a:	af e8       	ldi	r26, 0x8F	; 143
 10c:	b1 e0       	ldi	r27, 0x01	; 1
 10e:	11 97       	sbiw	r26, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <_Z7HienThij+0x7c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_Z7HienThij+0x82>
 114:	00 00       	nop
		_delay_ms(0.1);
		
		PORTA = 0X00;
 116:	1b ba       	out	0x1b, r1	; 27
		PORTA = (1<<PINB1);
 118:	8b bb       	out	0x1b, r24	; 27
		PORTB = MaDB[DonVi];
 11a:	80 81       	ld	r24, Z
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	cf e8       	ldi	r28, 0x8F	; 143
 120:	d1 e0       	ldi	r29, 0x01	; 1
 122:	21 97       	sbiw	r28, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <_Z7HienThij+0x90>
 126:	00 c0       	rjmp	.+0      	; 0x128 <_Z7HienThij+0x96>
 128:	00 00       	nop
		_delay_ms(0.1);
	}
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA = (1<<PINA0) | (1<<PINA1);
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	8a bb       	out	0x1a, r24	; 26
	PORTA = (0<<PINA0) | (0<<PINA1);
 134:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0XFF;
 136:	9f ef       	ldi	r25, 0xFF	; 255
 138:	97 bb       	out	0x17, r25	; 23
	PORTB = 0x00;
 13a:	18 ba       	out	0x18, r1	; 24
	
	TCCR0 = (1<<CS00) | (1<<CS01);
 13c:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 130;
 13e:	82 e8       	ldi	r24, 0x82	; 130
 140:	82 bf       	out	0x32, r24	; 50
	TIMSK|= (1<<TOIE0);
 142:	89 b7       	in	r24, 0x39	; 57
 144:	81 60       	ori	r24, 0x01	; 1
 146:	89 bf       	out	0x39, r24	; 57
	sei();
 148:	78 94       	sei
    while (1) 
    {
		HienThi(Count);
 14a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 14e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 152:	0e 94 49 00 	call	0x92	; 0x92 <_Z7HienThij>
		if(dem >= 500)
 156:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <dem>
 15a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <dem+0x1>
 15e:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <dem+0x2>
 162:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <dem+0x3>
 166:	84 3f       	cpi	r24, 0xF4	; 244
 168:	91 40       	sbci	r25, 0x01	; 1
 16a:	a1 05       	cpc	r26, r1
 16c:	b1 05       	cpc	r27, r1
 16e:	68 f3       	brcs	.-38     	; 0x14a <main+0x1a>
		{
			if(Count < 59)
 170:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 174:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 178:	8b 33       	cpi	r24, 0x3B	; 59
 17a:	91 05       	cpc	r25, r1
 17c:	30 f4       	brcc	.+12     	; 0x18a <main+0x5a>
			{
				Count++;
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 184:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 188:	04 c0       	rjmp	.+8      	; 0x192 <main+0x62>
			}
			else
			{
				Count = 0;
 18a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x1>
 18e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
			}
			dem = 0;
 192:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <dem>
 196:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <dem+0x1>
 19a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <dem+0x2>
 19e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <dem+0x3>
 1a2:	d3 cf       	rjmp	.-90     	; 0x14a <main+0x1a>

000001a4 <__vector_9>:
		}
    }
}
ISR(TIMER0_OVF_vect)
{
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
	TCNT0 = 130;
 1b6:	82 e8       	ldi	r24, 0x82	; 130
 1b8:	82 bf       	out	0x32, r24	; 50
	dem++;
 1ba:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <dem>
 1be:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <dem+0x1>
 1c2:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <dem+0x2>
 1c6:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <dem+0x3>
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	a1 1d       	adc	r26, r1
 1ce:	b1 1d       	adc	r27, r1
 1d0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <dem>
 1d4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <dem+0x1>
 1d8:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <dem+0x2>
 1dc:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <dem+0x3>
}
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__umulhisi3>:
 1f2:	a2 9f       	mul	r26, r18
 1f4:	b0 01       	movw	r22, r0
 1f6:	b3 9f       	mul	r27, r19
 1f8:	c0 01       	movw	r24, r0
 1fa:	a3 9f       	mul	r26, r19
 1fc:	70 0d       	add	r23, r0
 1fe:	81 1d       	adc	r24, r1
 200:	11 24       	eor	r1, r1
 202:	91 1d       	adc	r25, r1
 204:	b2 9f       	mul	r27, r18
 206:	70 0d       	add	r23, r0
 208:	81 1d       	adc	r24, r1
 20a:	11 24       	eor	r1, r1
 20c:	91 1d       	adc	r25, r1
 20e:	08 95       	ret

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
