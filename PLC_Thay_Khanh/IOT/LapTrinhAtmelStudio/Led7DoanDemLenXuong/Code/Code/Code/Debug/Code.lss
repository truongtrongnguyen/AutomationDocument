
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000186  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007bf  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000651  00000000  00000000  00000a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cf  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003aa  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c3  00000000  00000000  00001756  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001919  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 77 00 	call	0xee	; 0xee <main>
  7a:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z7HienThij>:
#include <avr/delay.h>
unsigned char MaDB[10] = {0XC0, 0XF9, 0XA4, 0XB0, 0X99, 0X92, 0X82, 0XF8, 0X80, 0X90};
// Ma hien thi so tu 0 den 9, Kich muc thap Anot chung

void HienThi(unsigned int x)
{
  82:	ac 01       	movw	r20, r24
	temp = x;
	HangChuc = temp/10;
	DonVi = temp%10;
	
	// kich chan DK hien thi led so 1
	PORTA = 0X00;
  84:	1b ba       	out	0x1b, r1	; 27
	PORTA = 0B0000001;
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	8b bb       	out	0x1b, r24	; 27
	PORTB = MaDB[HangChuc];
  8a:	9a 01       	movw	r18, r20
  8c:	ad ec       	ldi	r26, 0xCD	; 205
  8e:	bc ec       	ldi	r27, 0xCC	; 204
  90:	0e 94 b2 00 	call	0x164	; 0x164 <__umulhisi3>
  94:	96 95       	lsr	r25
  96:	87 95       	ror	r24
  98:	96 95       	lsr	r25
  9a:	87 95       	ror	r24
  9c:	96 95       	lsr	r25
  9e:	87 95       	ror	r24
  a0:	fc 01       	movw	r30, r24
  a2:	e0 5a       	subi	r30, 0xA0	; 160
  a4:	ff 4f       	sbci	r31, 0xFF	; 255
  a6:	20 81       	ld	r18, Z
  a8:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	ef e9       	ldi	r30, 0x9F	; 159
  ac:	ff e0       	ldi	r31, 0x0F	; 15
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <_Z7HienThij+0x2c>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_Z7HienThij+0x32>
  b4:	00 00       	nop
	_delay_ms(1);
	
	//// kich chan DK hien thi led so 2
	PORTA = 0X00;
  b6:	1b ba       	out	0x1b, r1	; 27
	PORTA = 0B00000010;
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	2b bb       	out	0x1b, r18	; 27
	PORTB = MaDB[DonVi];
  bc:	9c 01       	movw	r18, r24
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	82 0f       	add	r24, r18
  d0:	93 1f       	adc	r25, r19
  d2:	48 1b       	sub	r20, r24
  d4:	59 0b       	sbc	r21, r25
  d6:	fa 01       	movw	r30, r20
  d8:	e0 5a       	subi	r30, 0xA0	; 160
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	80 81       	ld	r24, Z
  de:	88 bb       	out	0x18, r24	; 24
  e0:	8f e9       	ldi	r24, 0x9F	; 159
  e2:	9f e0       	ldi	r25, 0x0F	; 15
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <_Z7HienThij+0x62>
  e8:	00 c0       	rjmp	.+0      	; 0xea <_Z7HienThij+0x68>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <main>:


int main(void)
{
    /* Replace with your application code */
	DDRB = 0XFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	87 bb       	out	0x17, r24	; 23
	DDRA = (1<<PINA0)|(1<<PINA1); // DDRA = 0B00000011
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	8a bb       	out	0x1a, r24	; 26
	PORTB = 0X00;
  f6:	18 ba       	out	0x18, r1	; 24
	PORTA = 0X00;
  f8:	1b ba       	out	0x1b, r1	; 27
	DDRC = (0<<PINC0)|(0<<PINC1); // DDRC = 0B00000000 --> Khai Bao 2 chan nut nhan
  fa:	14 ba       	out	0x14, r1	; 20
	unsigned int i = 0;
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
	
    while (1) 
    {
		HienThi(i);
 100:	ce 01       	movw	r24, r28
 102:	0e 94 41 00 	call	0x82	; 0x82 <_Z7HienThij>
		if((PINC & (1<<PINC0))==0)
 106:	98 99       	sbic	0x13, 0	; 19
 108:	16 c0       	rjmp	.+44     	; 0x136 <main+0x48>
		{
			while((PINC & (1<<PINC0))==0)
 10a:	98 99       	sbic	0x13, 0	; 19
 10c:	05 c0       	rjmp	.+10     	; 0x118 <main+0x2a>
			{
				HienThi(i);
 10e:	ce 01       	movw	r24, r28
 110:	0e 94 41 00 	call	0x82	; 0x82 <_Z7HienThij>
    while (1) 
    {
		HienThi(i);
		if((PINC & (1<<PINC0))==0)
		{
			while((PINC & (1<<PINC0))==0)
 114:	98 9b       	sbis	0x13, 0	; 19
 116:	fb cf       	rjmp	.-10     	; 0x10e <main+0x20>
			{
				HienThi(i);
			}
			if(i<99)
 118:	c3 36       	cpi	r28, 0x63	; 99
 11a:	d1 05       	cpc	r29, r1
 11c:	28 f4       	brcc	.+10     	; 0x128 <main+0x3a>
			{
				i++;
 11e:	21 96       	adiw	r28, 0x01	; 1
				HienThi(i);
 120:	ce 01       	movw	r24, r28
 122:	0e 94 41 00 	call	0x82	; 0x82 <_Z7HienThij>
 126:	ec cf       	rjmp	.-40     	; 0x100 <main+0x12>
			}
			else
			{
				i = 0;
				HienThi(i);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 41 00 	call	0x82	; 0x82 <_Z7HienThij>
				i++;
				HienThi(i);
			}
			else
			{
				i = 0;
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	e5 cf       	rjmp	.-54     	; 0x100 <main+0x12>
				HienThi(i);
			}
		}
		else if((PINC&(1<<PINC1))==0)
 136:	99 99       	sbic	0x13, 1	; 19
 138:	e3 cf       	rjmp	.-58     	; 0x100 <main+0x12>
		{
			while((PINC & (1<<PINC1))==0)
 13a:	99 99       	sbic	0x13, 1	; 19
 13c:	05 c0       	rjmp	.+10     	; 0x148 <main+0x5a>
			{
				HienThi(i);
 13e:	ce 01       	movw	r24, r28
 140:	0e 94 41 00 	call	0x82	; 0x82 <_Z7HienThij>
				HienThi(i);
			}
		}
		else if((PINC&(1<<PINC1))==0)
		{
			while((PINC & (1<<PINC1))==0)
 144:	99 9b       	sbis	0x13, 1	; 19
 146:	fb cf       	rjmp	.-10     	; 0x13e <main+0x50>
			{
				HienThi(i);
			}
			if(i>0)
 148:	20 97       	sbiw	r28, 0x00	; 0
 14a:	29 f0       	breq	.+10     	; 0x156 <main+0x68>
			{
				i--;
 14c:	21 97       	sbiw	r28, 0x01	; 1
				HienThi(i);
 14e:	ce 01       	movw	r24, r28
 150:	0e 94 41 00 	call	0x82	; 0x82 <_Z7HienThij>
 154:	d5 cf       	rjmp	.-86     	; 0x100 <main+0x12>
			}
			else
			{
				i = 99;
				HienThi(i);
 156:	83 e6       	ldi	r24, 0x63	; 99
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 41 00 	call	0x82	; 0x82 <_Z7HienThij>
				i--;
				HienThi(i);
			}
			else
			{
				i = 99;
 15e:	c3 e6       	ldi	r28, 0x63	; 99
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	ce cf       	rjmp	.-100    	; 0x100 <main+0x12>

00000164 <__umulhisi3>:
 164:	a2 9f       	mul	r26, r18
 166:	b0 01       	movw	r22, r0
 168:	b3 9f       	mul	r27, r19
 16a:	c0 01       	movw	r24, r0
 16c:	a3 9f       	mul	r26, r19
 16e:	70 0d       	add	r23, r0
 170:	81 1d       	adc	r24, r1
 172:	11 24       	eor	r1, r1
 174:	91 1d       	adc	r25, r1
 176:	b2 9f       	mul	r27, r18
 178:	70 0d       	add	r23, r0
 17a:	81 1d       	adc	r24, r1
 17c:	11 24       	eor	r1, r1
 17e:	91 1d       	adc	r25, r1
 180:	08 95       	ret

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
