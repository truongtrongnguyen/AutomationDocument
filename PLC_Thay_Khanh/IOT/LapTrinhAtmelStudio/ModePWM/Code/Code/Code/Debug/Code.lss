
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ad  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e4  00000000  00000000  0000083d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000260  00000000  00000000  00000e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037a  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  00001432  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3b 00 	call	0x76	; 0x76 <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8PWM_initv>:
#include <avr/io.h>
#include <avr/delay.h>

void PWM_init()
{
	DDRB = (1<<PB3); // Set OC0 pin as OUPUT
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	87 bb       	out	0x17, r24	; 23
	// Set fast PWM mode with non-inverted output
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00); // Chon mode fast PWM, NON-INVERTED, PRECALLER	
  70:	89 e6       	ldi	r24, 0x69	; 105
  72:	83 bf       	out	0x33, r24	; 51
  74:	08 95       	ret

00000076 <main>:

int main(void)
{
    /* Replace with your application code */
	unsigned char duty;
	PWM_init();
  76:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8PWM_initv>
    while (1) 
    {
		for(duty = 0; duty<255; duty++)
  7a:	80 e0       	ldi	r24, 0x00	; 0
		{
			OCR0 = duty;	// Thay doi gia tri se thay doi do rong xung
  7c:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	ef e1       	ldi	r30, 0x1F	; 31
  80:	fe e4       	ldi	r31, 0x4E	; 78
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <main+0xc>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x12>
  88:	00 00       	nop
    /* Replace with your application code */
	unsigned char duty;
	PWM_init();
    while (1) 
    {
		for(duty = 0; duty<255; duty++)
  8a:	8f 5f       	subi	r24, 0xFF	; 255
  8c:	8f 3f       	cpi	r24, 0xFF	; 255
  8e:	b1 f7       	brne	.-20     	; 0x7c <main+0x6>
			OCR0 = duty;	// Thay doi gia tri se thay doi do rong xung
			_delay_ms(10);
		}
		for(duty = 255; duty>0; duty--)
		{
			OCR0 = duty;
  90:	8c bf       	out	0x3c, r24	; 60
  92:	ef e1       	ldi	r30, 0x1F	; 31
  94:	fe e4       	ldi	r31, 0x4E	; 78
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x20>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x26>
  9c:	00 00       	nop
		for(duty = 0; duty<255; duty++)
		{
			OCR0 = duty;	// Thay doi gia tri se thay doi do rong xung
			_delay_ms(10);
		}
		for(duty = 255; duty>0; duty--)
  9e:	81 50       	subi	r24, 0x01	; 1
  a0:	b9 f7       	brne	.-18     	; 0x90 <main+0x1a>
  a2:	eb cf       	rjmp	.-42     	; 0x7a <main+0x4>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
