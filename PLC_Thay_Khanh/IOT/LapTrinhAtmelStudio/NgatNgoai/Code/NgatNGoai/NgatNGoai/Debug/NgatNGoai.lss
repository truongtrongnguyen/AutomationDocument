
NgatNGoai.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006de  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e7  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000284  00000000  00000000  00000ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016f  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001669  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA = 0XFF; // OUTPUT
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0X00; // Kích m?c cao nên cho nó v? 0V
  70:	1b ba       	out	0x1b, r1	; 27
	DDRD = 0B00000001; // Chân D0 là OUTPUT, D2  là INPUT
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	81 bb       	out	0x11, r24	; 17
	PORTD = (0<<PIND0); // Chân D0 là 0v
  76:	12 ba       	out	0x12, r1	; 18
	GICR |= (1<<INT0); // Kích ho?t chân ng?t là INT0
  78:	8b b7       	in	r24, 0x3b	; 59
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC01); // Ch?n ch? ?? ng?t
  7e:	85 b7       	in	r24, 0x35	; 53
  80:	82 60       	ori	r24, 0x02	; 2
  82:	85 bf       	out	0x35, r24	; 53
	sei();
  84:	78 94       	sei
    while (1) 
    {
		PORTA = 0X01;
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	3f ef       	ldi	r19, 0xFF	; 255
  8c:	43 ec       	ldi	r20, 0xC3	; 195
  8e:	59 e0       	ldi	r21, 0x09	; 9
  90:	31 50       	subi	r19, 0x01	; 1
  92:	40 40       	sbci	r20, 0x00	; 0
  94:	50 40       	sbci	r21, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
  9c:	87 e0       	ldi	r24, 0x07	; 7
  9e:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(200);
		for(int i = 0; i <7; i++)
		{
			PORTA = PORTA<< 1;
  a0:	3b b3       	in	r19, 0x1b	; 27
  a2:	33 0f       	add	r19, r19
  a4:	3b bb       	out	0x1b, r19	; 27
  a6:	3f ef       	ldi	r19, 0xFF	; 255
  a8:	43 ec       	ldi	r20, 0xC3	; 195
  aa:	59 e0       	ldi	r21, 0x09	; 9
  ac:	31 50       	subi	r19, 0x01	; 1
  ae:	40 40       	sbci	r20, 0x00	; 0
  b0:	50 40       	sbci	r21, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x40>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x4a>
  b6:	00 00       	nop
  b8:	01 97       	sbiw	r24, 0x01	; 1
	sei();
    while (1) 
    {
		PORTA = 0X01;
		_delay_ms(200);
		for(int i = 0; i <7; i++)
  ba:	31 f3       	breq	.-52     	; 0x88 <main+0x1c>
  bc:	f1 cf       	rjmp	.-30     	; 0xa0 <main+0x34>

000000be <__vector_1>:
		}
    }
}

ISR(INT0_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	if((PIND & (1<<PIND2))==0)	// N?u có nh?n nút ng?t D2
  ce:	82 99       	sbic	0x10, 2	; 16
  d0:	0c c0       	rjmp	.+24     	; 0xea <__vector_1+0x2c>
	{
		PORTD = 0X01;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	89 e6       	ldi	r24, 0x69	; 105
  da:	98 e1       	ldi	r25, 0x18	; 24
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <__vector_1+0x1e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <__vector_1+0x28>
  e6:	00 00       	nop
		_delay_ms(500);
		PORTD = 0X00;
  e8:	12 ba       	out	0x12, r1	; 18
	}
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
