
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000120  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081c  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065b  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d7  00000000  00000000  000010c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bb  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000204  00000000  00000000  000017b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  7a:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z11LCD_Commandh>:
    }
}

void LCD_Command(unsigned char cmnd)
{
	LCD_Command_Port &= ~(1<<RW);	// RW = 0
  82:	a9 98       	cbi	0x15, 1	; 21
	LCD_Command_Port &= ~(1<<RS);	// RS = 0
  84:	a8 98       	cbi	0x15, 0	; 21
	LCD_Data_Port = cmnd;			// Gui Byte lenh ra cac chan Port
  86:	82 bb       	out	0x12, r24	; 18
	
	// Tao xung xuong cho chan E de cho phep ghi lenh vao LCD
	LCD_Command_Port |= (1<<EN);	// EN = 1
  88:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f ec       	ldi	r24, 0xCF	; 207
  8c:	97 e0       	ldi	r25, 0x07	; 7
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <_Z11LCD_Commandh+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <_Z11LCD_Commandh+0x12>
  94:	00 00       	nop
	_delay_ms(1);
	LCD_Command_Port &= ~(1<<EN);	// EN = 0
  96:	aa 98       	cbi	0x15, 2	; 21
  98:	8f e6       	ldi	r24, 0x6F	; 111
  9a:	97 e1       	ldi	r25, 0x17	; 23
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <_Z11LCD_Commandh+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_Z11LCD_Commandh+0x20>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <_Z8LCD_Charh>:
	_delay_ms(3);
}

void LCD_Char(unsigned char char_data)
{
	LCD_Command_Port &= ~(1<<RW);	// RW = 0
  a6:	a9 98       	cbi	0x15, 1	; 21
	LCD_Command_Port |= (1<<RS);	// RS = 1
  a8:	a8 9a       	sbi	0x15, 0	; 21
	LCD_Data_Port = char_data;
  aa:	82 bb       	out	0x12, r24	; 18
	
	// Tao xung xuong cho chan E de cho phep ghi lenh vao LCD
	LCD_Command_Port |= (1<<EN);	// EN = 1;
  ac:	aa 9a       	sbi	0x15, 2	; 21
  ae:	8f ec       	ldi	r24, 0xCF	; 207
  b0:	97 e0       	ldi	r25, 0x07	; 7
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <_Z8LCD_Charh+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <_Z8LCD_Charh+0x12>
  b8:	00 00       	nop
	_delay_ms(1);
	LCD_Command_Port &= ~(1<<EN);	// EN = 0;
  ba:	aa 98       	cbi	0x15, 2	; 21
  bc:	8f e6       	ldi	r24, 0x6F	; 111
  be:	97 e1       	ldi	r25, 0x17	; 23
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <_Z8LCD_Charh+0x1a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z8LCD_Charh+0x20>
  c6:	00 00       	nop
  c8:	08 95       	ret

000000ca <_Z10LCD_StringPc>:
	_delay_ms(3);
}

void LCD_String(char *str)
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ec 01       	movw	r28, r24
	for(int i = 0; str[i] != 0; i++)
  d0:	88 81       	ld	r24, Y
  d2:	88 23       	and	r24, r24
  d4:	31 f0       	breq	.+12     	; 0xe2 <_Z10LCD_StringPc+0x18>
  d6:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char(str[i]);
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8LCD_Charh>
	_delay_ms(3);
}

void LCD_String(char *str)
{
	for(int i = 0; str[i] != 0; i++)
  dc:	89 91       	ld	r24, Y+
  de:	81 11       	cpse	r24, r1
  e0:	fb cf       	rjmp	.-10     	; 0xd8 <_Z10LCD_StringPc+0xe>
	{
		LCD_Char(str[i]);
	}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <main>:
int main(void)
{
    /* Replace with your application code */
	
	// Khoi tao Output
	LCD_Data_Dir = 0xFF;	// Cac chan Gui Data
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	81 bb       	out	0x11, r24	; 17
	LCD_Command_Dir |=(1<<RW)|(1<<RS)|(1<<EN);
  ec:	84 b3       	in	r24, 0x14	; 20
  ee:	87 60       	ori	r24, 0x07	; 7
  f0:	84 bb       	out	0x14, r24	; 20
	
	// Khoi tao LCD - Cac ma Lenh co trong Image
	LCD_Command(0x38);	// Khai bao LCD module 8bit, 2dong
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	0e 94 41 00 	call	0x82	; 0x82 <_Z11LCD_Commandh>
	LCD_Command(0x0C);	// Bat hien thi, tat con tro
  f8:	8c e0       	ldi	r24, 0x0C	; 12
  fa:	0e 94 41 00 	call	0x82	; 0x82 <_Z11LCD_Commandh>
	LCD_Command(0x01);	// Bat Man hinh LCD
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 41 00 	call	0x82	; 0x82 <_Z11LCD_Commandh>
	
	LCD_String("Hello Word!");
 104:	80 e6       	ldi	r24, 0x60	; 96
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 65 00 	call	0xca	; 0xca <_Z10LCD_StringPc>
	LCD_Command(0xC0);	// Di chuyen con tro xuong hang thu 2
 10c:	80 ec       	ldi	r24, 0xC0	; 192
 10e:	0e 94 41 00 	call	0x82	; 0x82 <_Z11LCD_Commandh>
	LCD_String("GoodBye");
 112:	8c e6       	ldi	r24, 0x6C	; 108
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 65 00 	call	0xca	; 0xca <_Z10LCD_StringPc>
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0x32>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
